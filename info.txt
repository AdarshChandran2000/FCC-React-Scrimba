* u can easily add react to the html file by importing few scripts.
* this is easy way but not the normal and ideal way doing.

* why React? Its composable, its declarative, its a hirable skill, its actively maintained by skilled people


* The code we write inside ReactDOM.render is JSX (Javascript XML);
* if we try printing a JSX element, it will actually return a JS object. 
* images/react1.jpg
* make sure only one element is there in JSX, or else there will be error (wrap everything inside a DIV)

* ReactDOM.render only can render JSX. if u use .append() function, it ll only return an object.
 * React should be imported inorder for JSX to be return

* components are basically calling functions in react. use Pascalcase for components as convention and <Nav /> use this.

* export default Navbar;  ( default is used when only one function or variable is passed );
* the default extension for imports is .js, so you won't have to tell the extension specifically.
* npx create-react-app firstApp  // creates react app
* npm start // 

* PART 2


inline styles > style tag / external .css file (depends on which is in the bottom)
bottom ones get higher priority in css.    
inline styles > #id > .class > more specifications (multiple selectors) > single selector


li > a {
    // means the cases where li in which a is the children of li, not grandchildren or any others
}
li a // means all a's inside li, be it children or grandchildren.
li, a // means both li and a 


React can detect JS arrays and will print it as plain text 
['Bob', 'Alice'] inside JSX will print /* BobAlice */ in the screen

You can use a spread operator to send props, similar to sending the entire object.
spread operator will already divide all the values inside the object with the same name. 
{...item} is equivalent to  name=item.name id=item.id etc
passing entire item as prop can also be done.. but then in the fetching page, use props.item.name


states are used whenever we want the screen to refresh and update the change if the variable is changed 

in ES6, Computed property names in JS helps us to use dynamic strings as JS properties 
{ 
    ...objectName,
    [event.target.name] : event.target.values 
}


Somethings can't be handled by React alone, they are,
* local storage
* API / database instructions
* subscriptions (eg: web sockets)
* syncing 2 different internal states together


All these above issues can be avoided using useEffect hook

useEffect runs after running the entire JSX elements only
useEffect will always run in the first render, and then it will only render again, when any one value inside dependency array (2nd parameter) changes

usestate is also initalized the first time. when the value of the state changes, it actually runs the entire JSX component therefore 
running all the multiple states inside it (which is troublesome for heavy jobs like local storage pulling data). to avoid that, use a 
function as the parameter of the useState() function instead of a variable, so that the state will only run when the value changes.
This process is called Lazy State Initialization.


onClick={(event) => props.deleteNote(event, note.id)}
can be used if we have parameters other than event, then do it this way.



